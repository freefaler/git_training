Overview/Summary notes on what I've learned up to date

12 Jul: Git Session 1

Basic structure of the git local and remote repositories

Localy we have the following parts
- working directory (where our IDE writes changes)
- staging area (where git stores files before they're put into Local Repository area)
- Local repository, made from
	-- Branches (local) - local branches
	-- Remotes - remote branches (only points)

Remote repository - this is the one on the server where all the people commit their changes

What I've done:
- git init (created directory structure that is used by git as a DB to store changes)
- cloned from remote, that did the following:
	- copied files from remote into Local Repository
	- copied Remote branches into Local Repository
	- created HEAD (working directory pointer) 
	- created local branch master
	- found remote origin/master and set it as upstream to my local master branch
- added files with "git add filename.txt" (to the Staging area)
- commited files with "git commit -m '...'" (to the Local Repository)
- pushed files to remote with "git push" (to the Remote Repository)
- git status prints useful info on current status of the directory

Working with branches
a branch is a "snapshot" in time of the codebase. Git restores files in working directory when I checkout a branch
- git checkout branch_name -> changes to branch_name
- git checkout -b branch_name -> copies current branch as branch_name and switches to it
- git branch -> shows current branch and list of branches

Working with staging area
Staging area is a "temporary" place you can put files to. Each time there is a change, you must `add` that file to the  staging area
- git add filename.txt
- git add .
- git commit -> commits the changes from the staging area to Local Repository branch


Working with remote repo
From the remote repo we can do the following:
- git clone https://... (cloning the code and building local repositories)
- git pull  (getting updates to branches from the remote repo to the local repo, but not to the working directory)
- git fetch (getting updates from the remote repo to working directory, not only to local repo)
- git push (updating remote repo with local changes) 

Merging and conflicts
When merging, always you're merge into the branch you're in.
- git checkout branch_name
- git merge other_branch_name
- git will try to merge from the parent node but merge conflicts may occur
- when a conflict is encountered all conflicted files will be rewritten with special syntax
- must fix the conflicts and then commit the merge (?)
- when merging a new merge commit is created 

Rebase
Also useful to rebase a branch to another branch. It keeps the history and doesn't create a manatory merge commit. Works by starting from the common ancestor and applying all changes one by one.
- git checkout branch_name (going to branch we'll be rebasing with master)
- git rebase master (applying master on branch_name)
- git checkout master (going back to master)
- git merge checkout (merge is "fast-forward" without merge commit) 

Working with stashes
Stashes - temporary "snapshots" of unfinished code that we don't won't to put in the staging area.
- git stash - stores current state into a "stash"
- git stash list - lists a stash
- git stash apply - applies the last stash, creating merged conflict file  while keeping it in the stash list
- git stash pop - applies stash and then deletes it
When there is a conflict all merge conflict files must be fixed and then commited again.

